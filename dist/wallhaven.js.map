{
  "version": 3,
  "sources": ["../index.js"],
  "sourcesContent": ["/**\n * To pass Content-Security-Policy, add header to the page:\n * <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' <APIServerURL>\">\n * API Document: https://wallhaven.cc/help/api\n */\n\n/** ListWallpapersOption\n * @typedef {Object} ListWallpapersOption\n * @property {string | undefined} [q] Search query\n * @property {\"000\"|\"001\"|\"010\"|\"011\"|\"100\"|\"101\"|\"110\"|\"111\" | undefined} [categories] Turn categories on(1) or off(0) (general/anime/people)\n * @property {\"000\"|\"001\"|\"010\"|\"011\"|\"100\"|\"101\"|\"110\"|\"111\" | undefined} [purity] Turn purities on(1) or off(0) (sfw/sketchy/nsfw)\n * @property {\"date_added\"|\"relevance\"|\"random\"|\"views\"|\"favorites\"|\"toplist\" | undefined} [sorting] Method of sorting results\n * @property {\"desc\"|\"asc\" | undefined} order Sorting order\n * @property {\"1d\"|\"3d\"|\"1w\"|\"1M\"|\"3M\"|\"6M\"|\"1y\" | undefined} [topRange] Sorting MUST be set to 'toplist'\n * @property {string | undefined} [atleast] Minimum resolution allowed. e.g. 1920x1080\n * @property {string | undefined} [resolutions] List of exact wallpaper resolution(s). e.g.  1920x1080,1920x1200\n * @property {string | undefined} [ratios] List of aspect ratio(s). e.g.  16x9,16x10,1x1,landscape,portrait\n * @property {string | undefined} [colors] Search by color\n * @property {string | undefined} [page] Pagination\n * @property {string | undefined} [seed] Optional seed for random results\n */\n\nexport const DEFAULT_API_ENTRY = \"https://wallhaven.cc/api\";\n\nexport class WallhavenAPI {\n    /** @type {string | null} */\n    #apiKey = null;\n    /** @type {string} */\n    #apiEntry = DEFAULT_API_ENTRY;\n\n    constructor (apiEntry = DEFAULT_API_ENTRY, apiKey = null) {\n        this.#apiEntry = apiEntry;\n        this.#apiKey = apiKey;\n    }\n\n    #newApiUrl (apiPath) {\n        const url = new URL(this.#apiEntry + apiPath);\n        if (this.#apiKey) {\n            url.searchParams.set(\"apikey\", this.#apiKey);\n        }\n        return url;\n    }\n\n    async #apiFetch (url) {\n        try {\n            const resp = await fetch(url);\n            if (resp.status !== 200) {\n                return undefined;\n            }\n            return await resp.json();\n        } catch (e) {\n            console.error(e);\n            return undefined;\n        }\n    }\n\n    /**\n     * listWallpapers\n     * @param {ListWallpapersOption} option \n     * @returns {Promise<Array<any>> | Promise<undefined>}\n     */\n    async listWallpapers (option) {\n        const url = this.#newApiUrl(\"/v1/search\");\n        for (const param in option) {\n            if (Object.hasOwnProperty.call(option, param)) {\n                let value = option[ param ];\n                if (typeof value === \"number\") {\n                    value = value.toString();\n                }\n                url.searchParams.set(param, value);\n            }\n        }\n        return await this.#apiFetch(url);\n    }\n\n    async getWallpaperInformation (wallpaperId) {\n        const url = this.#newApiUrl(\"/v1/w/\" + encodeURI(wallpaperId));\n        return await this.#apiFetch(url);\n    }\n\n    async getTaginfo (tagId) {\n        const url = this.#newApiUrl(\"/v1/tag/\" + encodeURI(tagId));\n        return await this.#apiFetch(url);\n    }\n\n    async getUserSettings () {\n        const url = this.#newApiUrl(\"/v1/settings\");\n        return await this.#apiFetch(url);\n    }\n\n    async getUserCollections () {\n        const url = this.#newApiUrl(\"/v1/collections\");\n        return await this.#apiFetch(url);\n    }\n}\n"],
  "mappings": "AAsBO,IAAMA,EAAoB,2BAEpBC,EAAN,KAAmB,CAEtBC,GAAU,KAEVC,GAAYH,EAEZ,YAAaI,EAAWJ,EAAmBK,EAAS,KAAM,CACtD,KAAKF,GAAYC,EACjB,KAAKF,GAAUG,CACnB,CAEAC,GAAYC,EAAS,CACjB,IAAMC,EAAM,IAAI,IAAI,KAAKL,GAAYI,CAAO,EAC5C,OAAI,KAAKL,IACLM,EAAI,aAAa,IAAI,SAAU,KAAKN,EAAO,EAExCM,CACX,CAEA,KAAMC,GAAWD,EAAK,CAClB,GAAI,CACA,IAAME,EAAO,MAAM,MAAMF,CAAG,EAC5B,OAAIE,EAAK,SAAW,IAChB,OAEG,MAAMA,EAAK,KAAK,CAC3B,OAASC,EAAP,CACE,QAAQ,MAAMA,CAAC,EACf,MACJ,CACJ,CAOA,MAAM,eAAgBC,EAAQ,CAC1B,IAAMJ,EAAM,KAAKF,GAAW,YAAY,EACxC,QAAWO,KAASD,EAChB,GAAI,OAAO,eAAe,KAAKA,EAAQC,CAAK,EAAG,CAC3C,IAAIC,EAAQF,EAAQC,CAAM,EACtB,OAAOC,GAAU,WACjBA,EAAQA,EAAM,SAAS,GAE3BN,EAAI,aAAa,IAAIK,EAAOC,CAAK,EAGzC,OAAO,MAAM,KAAKL,GAAUD,CAAG,CACnC,CAEA,MAAM,wBAAyBO,EAAa,CACxC,IAAMP,EAAM,KAAKF,GAAW,SAAW,UAAUS,CAAW,CAAC,EAC7D,OAAO,MAAM,KAAKN,GAAUD,CAAG,CACnC,CAEA,MAAM,WAAYQ,EAAO,CACrB,IAAMR,EAAM,KAAKF,GAAW,WAAa,UAAUU,CAAK,CAAC,EACzD,OAAO,MAAM,KAAKP,GAAUD,CAAG,CACnC,CAEA,MAAM,iBAAmB,CACrB,IAAMA,EAAM,KAAKF,GAAW,cAAc,EAC1C,OAAO,MAAM,KAAKG,GAAUD,CAAG,CACnC,CAEA,MAAM,oBAAsB,CACxB,IAAMA,EAAM,KAAKF,GAAW,iBAAiB,EAC7C,OAAO,MAAM,KAAKG,GAAUD,CAAG,CACnC,CACJ",
  "names": ["DEFAULT_API_ENTRY", "WallhavenAPI", "#apiKey", "#apiEntry", "apiEntry", "apiKey", "#newApiUrl", "apiPath", "url", "#apiFetch", "resp", "e", "option", "param", "value", "wallpaperId", "tagId"]
}
